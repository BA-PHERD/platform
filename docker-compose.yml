x-kafka-shared-image: &kafka-shared-image
  image: 'bitnami/kafka:3.6.2'

# cannot keep image and healtcheck together because the kafka-init does not need a healthcheck
x-kafka-shared-healthcheck: &kafka-shared-healthcheck
  healthcheck:
    test: ["CMD-SHELL", "kafka-topics.sh --list --bootstrap-server kafka-broker-0:9092 #,kafka-broker-1:9092" ]
    interval: 5s
    timeout: 5s
    retries: 10
    start_period: 1m
    # start_interval: 10s

x-kafka-shared-envs: &kafka-shared-envs
  KAFKA_CFG_PROCESS_ROLES: controller,broker
  KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
  KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
  KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 0@kafka-broker-0:9093 #,1@kafka-broker-1:9093
  KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
  KAFKA_KRAFT_CLUSTER_ID: clusterid0with016bytes

services:
  watcher:
    build:
      context: remote_machine
      dockerfile: ./Dockerfile
    depends_on:
      - kafka-init
    volumes:
      - ./remote_machine/to-watch:/app/to-watch:ro
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka-broker-0:9092 #,kafka-broker-1:9092

# ----------------------------- KAFKA -----------------------------
# https://github.com/bitnami/containers/blob/466fffb6f2fe8cef54f281f22e62a967f7d69b78/bitnami/kafka/README.md

  kafka-broker-0:
    <<: [*kafka-shared-image, *kafka-shared-healthcheck]
    environment:
      <<: *kafka-shared-envs
      KAFKA_CFG_NODE_ID: 0   

  # kafka-broker-1:
  #   <<: [*kafka-shared-image, *kafka-shared-healthcheck]
  #   environment:
  #     <<: *kafka-shared-envs
  #     KAFKA_CFG_NODE_ID: 1

  kafka-init:
    <<: *kafka-shared-image
    depends_on:
      kafka-broker-0:
        condition: service_healthy
      # kafka-broker-1:
      #   condition: service_healthy
    entrypoint:
      - 'bash'
      - '-c'
      - |
        kafka-topics.sh --create \
          --if-not-exists \
          --topic "filesystemwatcher.medical-records" \
          --replication-factor=1 \
          --bootstrap-server kafka-broker-0:9092 #,kafka-broker-1:9092

# ----------------------------- HIVE METASTORE -----------------------------
# https://github.com/naushadh/hive-metastore
  hive-metastore:
    image: naushadh/hive-metastore
    depends_on:
      ranger-db:
        condition: service_healthy
    environment:
      - DATABASE_HOST=ranger-db
      - DATABASE_DB=hive_metastore_db
      - DATABASE_USER=hive_metastore
      - DATABASE_PASSWORD=hive-password
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - S3_ENDPOINT_URL
      - S3_BUCKET
      - S3_PREFIX
    # ports:
    #   - '9083:9083'

# ----------------------------- TRINO -----------------------------
# https://trino.io/docs/current/installation/containers.html

  trino:
    image: ranger-trino
    stdin_open: true
    tty: true
    ports:
      - 8081:8080
    depends_on:
      ranger:
        condition: service_started
    volumes:
      - ./trino/catalog:/etc/trino/catalog
      - ./trino/kafka-description-files:/etc/trino/kafka

# ----------------------------- RANGER -----------------------------

  ranger:
    image: ranger:latest
    stdin_open: true
    tty: true
    ports:
      - "6080:6080"
    depends_on:
      ranger-zk:
        condition: service_started
      ranger-db:
        condition: service_healthy
      ranger-solr:
        condition: service_started
    environment:
      - DEBUG_ADMIN=${DEBUG_ADMIN:-false}
    command:
      - /home/ranger/scripts/ranger.sh

  ranger-zk:
    image: ranger-zk
    # ports:
    #   - "2181:2181"

  ranger-solr:
    image: ranger-solr
    # ports:
    #   - "8983:8983"
    command:
      - solr-precreate
      - ranger_audits
      - /opt/solr/server/solr/configsets/ranger_audits/

  ranger-db:
    image: ranger-postgres
    volumes:
      - ./postgres-db-mount:/var/lib/postgresql/data
      - ./postgres/init/hive-metastore-init.sql:/docker-entrypoint-initdb.d/hive-metastore-init.sql
    healthcheck:
      test: 'su -c "pg_isready -q" postgres'
      interval: 10s
      timeout: 2s
      retries: 30

# ----------------------------- DRUID -----------------------------
# https://druid.apache.org/docs/latest/tutorials/docker/#launching-the-cluster
# https://github.com/apache/druid/blob/29.0.1/distribution/docker/docker-compose.yml

  # druid-postgres:
  #   image: postgres:15
  #   # ports:
  #   #   - "5432:5432"
  #   # volumes:
  #   #   - metadata_data:/var/lib/postgresql/data
  #   environment:
  #     - POSTGRES_PASSWORD=FoolishPassword
  #     - POSTGRES_USER=druid
  #     - POSTGRES_DB=druid

  # # Need 3.5 or later for container nodes
  # druid-zookeeper:
  #   image: zookeeper:3.5.10
  #   # ports:
  #   #   - "2181:2181"
  #   environment:
  #     - ZOO_MY_ID=1

  # druid-coordinator:
  #   image: apache/druid:29.0.1
  #   # volumes:
  #   #   - druid_shared:/opt/shared
  #   #   - coordinator_var:/opt/druid/var
  #   depends_on:
  #     - druid-zookeeper
  #     - druid-postgres
  #   # ports:
  #   #   - "8081:8081"
  #   command:
  #     - coordinator
  #   env_file:
  #     - druid/druid.env

  # druid-broker:
  #   image: apache/druid:29.0.1
  #   # volumes:
  #   #   - broker_var:/opt/druid/var
  #   depends_on:
  #     - druid-zookeeper
  #     - druid-postgres
  #     - druid-coordinator
  #   # ports:
  #   #   - "8082:8082"
  #   command:
  #     - broker
  #   env_file:
  #     - druid/druid.env

  # druid-historical:
  #   image: apache/druid:29.0.1
  #   # volumes:
  #   #   - druid_shared:/opt/shared
  #   #   - historical_var:/opt/druid/var
  #   depends_on: 
  #     - druid-zookeeper
  #     - druid-postgres
  #     - druid-coordinator
  #   # ports:
  #   #   - "8083:8083"
  #   command:
  #     - historical
  #   env_file:
  #     - druid/druid.env

  # druid-middlemanager:
  #   image: apache/druid:29.0.1
  #   # volumes:
  #   #   - druid_shared:/opt/shared
  #   #   - middle_var:/opt/druid/var
  #   depends_on: 
  #     - druid-zookeeper
  #     - druid-postgres
  #     - druid-coordinator
  #   # ports:
  #   #   - "8091:8091"
  #   #   - "8100-8105:8100-8105"
  #   command:
  #     - middleManager
  #   env_file:
  #     - druid/druid.env

  # druid-router:
  #   image: apache/druid:29.0.1
  #   # volumes:
  #   #   - router_var:/opt/druid/var
  #   depends_on:
  #     - druid-zookeeper
  #     - druid-postgres
  #     - druid-coordinator
  #   ports:
  #     - "8888:8888"
  #   command:
  #     - router
  #   env_file:
  #     - druid/druid.env