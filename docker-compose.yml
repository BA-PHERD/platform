x-kafka-shared-image: &kafka-shared-image
  image: 'bitnami/kafka:3.6.2'

# cannot keep image and healtcheck together because the kafka-init does not need a healthcheck
x-kafka-shared-healthcheck: &kafka-shared-healthcheck
  healthcheck:
    test: ["CMD-SHELL", "kafka-topics.sh --list --bootstrap-server kafka-broker-0:9092 #,kafka-broker-1:9092" ]
    interval: 5s
    timeout: 5s
    retries: 10
    start_period: 2m
    # start_interval: 10s

x-kafka-shared-envs: &kafka-shared-envs
  KAFKA_CFG_PROCESS_ROLES: controller,broker
  KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
  KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
  KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 0@kafka-broker-0:9093 #,1@kafka-broker-1:9093
  KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
  KAFKA_KRAFT_CLUSTER_ID: clusterid0with016bytes

services:
  data-loading-webapp:
    build:
      context: remote_machine
      dockerfile: ./Dockerfile
    ports:
      - "5000:80"
    depends_on:
      - kafka-init
    environment:
      - FLASK_KAFKA_BOOTSTRAP_SERVERS=kafka-broker-0:9092 #,kafka-broker-1:9092

# ----------------------------- KAFKA -----------------------------
# https://github.com/bitnami/containers/blob/466fffb6f2fe8cef54f281f22e62a967f7d69b78/bitnami/kafka/README.md

  kafka-broker-0:
    <<: [*kafka-shared-image, *kafka-shared-healthcheck]
    environment:
      <<: *kafka-shared-envs
      KAFKA_CFG_NODE_ID: 0   

  # kafka-broker-1:
  #   <<: [*kafka-shared-image, *kafka-shared-healthcheck]
  #   environment:
  #     <<: *kafka-shared-envs
  #     KAFKA_CFG_NODE_ID: 1

  kafka-init:
    <<: *kafka-shared-image
    depends_on:
      kafka-broker-0:
        condition: service_healthy
      # kafka-broker-1:
      #   condition: service_healthy
    entrypoint:
      - 'bash'
      - '-c'
      - |
        kafka-topics.sh --create \
          --if-not-exists \
          --topic "filesystemwatcher.medical-records" \
          --replication-factor=1 \
          --bootstrap-server kafka-broker-0:9092 #,kafka-broker-1:9092

# ----------------------------- HIVE METASTORE -----------------------------
# https://github.com/naushadh/hive-metastore
  hive-metastore:
    image: naushadh/hive-metastore
    depends_on:
      ranger-db:
        condition: service_healthy
      minio-init:
        condition: service_completed_successfully
    environment:
      - DATABASE_HOST=ranger-db
      - DATABASE_DB=hive_metastore_db
      - DATABASE_USER=hive_metastore
      - DATABASE_PASSWORD=hive-password
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - S3_ENDPOINT_URL
      - S3_BUCKET
      - S3_PREFIX
    # ports:
    #   - '9083:9083'

# ----------------------------- MINIO -----------------------------
  minio:
    image: quay.io/minio/minio:latest
    ports:
    #   - '9000:9000'
      - '9001:9001'
    # volumes:
    #   - 'minio_data:/data'
    environment:
      - MINIO_ROOT_USER=miniouser
      - MINIO_ROOT_PASSWORD=miniopassword
    healthcheck:
      test: curl --fail http://localhost:9000/minio/health/live
      start_period: 1m
      retries: 10
      timeout: 5s
      interval: 5s
    command: ["server", "/data", "--console-address", ":9001"]

  minio-init:
    image: minio/mc:latest
    depends_on:
      minio:
        condition: service_healthy
    entrypoint:
      - /bin/bash
      - -c
      - |
        mc alias set local_minio http://minio:9000 miniouser miniopassword
        mc rm -r --force local_minio/prin
        mc mb local_minio/prin

# ----------------------------- TRINO -----------------------------
# https://trino.io/docs/current/installation/containers.html

  trino:
    image: ranger-trino
    stdin_open: true
    tty: true
    ports:
      - 8081:8080
    healthcheck:
      test: ["CMD-SHELL", "/usr/lib/trino/bin/health-check"]
      interval: 5s
      start_period: 2m
      timeout: 10s
      retries: 10
    depends_on:
      ranger:
        condition: service_started
    volumes:
      - ./trino/catalog:/etc/trino/catalog
      - ./trino/kafka-description-files:/etc/trino/kafka

# ----------------------------- CDC -----------------------------
## Includes Kafka CLI and the Trino CLI. This container encompasses a CDC script
## that copies the new Kafka messages to a Trino table (pointing to an S3 bucket)

  cdc-script:
    build:
      context: ./trino/cli
    image: trino-cdc:377
    environment:
      - TRINO_ENDPOINT=http://trino:8080
      - FLUSH_DELAY_SECONDS=15
    depends_on:
      trino:
        condition: service_healthy
      kafka-init:
        condition: service_completed_successfully
    volumes:
      - ./trino/cli/scripts:/cdc/scripts

# ----------------------------- HUE -----------------------------
## https://hub.docker.com/r/gethue/hue
  
  hue:
    image: gethue/hue:20240530-140101
    ports:
      - "8888:8888"
    depends_on:
      trino:
        condition: service_healthy
    volumes:
      - ./hue/hue.ini:/usr/share/hue/desktop/conf/hue.ini
  
# ----------------------------- SUPERSET -----------------------------
## https://hub.docker.com/r/apache/superset

  superset:
    build:
      context: ./superset
    image: superset-with-trino
    ports:
      - "7890:8088"
    depends_on:
      trino:
        condition: service_healthy
    environment:
      - SUPERSET_SECRET_KEY=supersetkey
      - ADMIN_USERNAME=admin
      - ADMIN_PASSWORD=admin
      - ADMIN_EMAIL=admin@superset.com
    volumes:
      - ./superset/bootstrap.sh:/bootstrap.sh
    entrypoint: ["/bootstrap.sh"]

# ----------------------------- RANGER -----------------------------

  ranger:
    image: ranger:latest
    stdin_open: true
    tty: true
    ports:
      - "6080:6080"
    depends_on:
      ranger-zk:
        condition: service_started
      ranger-db:
        condition: service_healthy
      ranger-solr:
        condition: service_started
    environment:
      - DEBUG_ADMIN=${DEBUG_ADMIN:-false}
    command:
      - /home/ranger/scripts/ranger.sh

  ranger-zk:
    image: ranger-zk
    # ports:
    #   - "2181:2181"

  ranger-solr:
    image: ranger-solr
    # ports:
    #   - "8983:8983"
    command:
      - solr-precreate
      - ranger_audits
      - /opt/solr/server/solr/configsets/ranger_audits/

  ranger-db:
    image: ranger-postgres
    volumes:
      # - ./postgres-db-mount:/var/lib/postgresql/data
      - ./postgres/init/hive-metastore-init.sql:/docker-entrypoint-initdb.d/hive-metastore-init.sql
    healthcheck:
      test: 'su -c "pg_isready -q" postgres'
      interval: 10s
      timeout: 2s
      retries: 30
