from dataclasses import field, fields
from pydantic.dataclasses import dataclass

from typing import Dict, Literal, Any
Self = Any

@dataclass
class PatientRecord:
    id: int = field(metadata={'mapped_to': '#ID'})
    data_di_nascita: int = field(metadata={'mapped_to': 'DATA DI NASCITA'})
    luogo_di_nascita: str = field(metadata={'mapped_to': 'LUOGO DI NASCITA'})
    age: int = field(metadata={'mapped_to': 'age'})
    sex: str = field(metadata={'mapped_to': 'sex'})
    telefono: str = field(metadata={'mapped_to': 'TELEFONO'})
    destrimane_mancino: Literal['destrimane', 'mancino'] = field(metadata={'mapped_to': 'DESTRIMANE/MANCINO'})
    egfr: int = field(metadata={'mapped_to': 'eGFR'})
    prima_visita: int = field(metadata={'mapped_to': '1° visita'})
    data_diagnosi: int = field(metadata={'mapped_to': 'Data diagnosi'})
    patologia: str = field(metadata={'mapped_to': 'PATOLOGIA'})
    a: str = field(metadata={'mapped_to': 'A'})
    t: str = field(metadata={'mapped_to': 'T'})
    n: str = field(metadata={'mapped_to': 'N'})
    diagnosi_ad: str = field(metadata={'mapped_to': 'diagnosi AD'})
    diagnosi: str = field(metadata={'mapped_to': 'DIAGNOSI'})
    fenotipo: str = field(metadata={'mapped_to': 'FENOTIPO'})
    mci: str = field(metadata={'mapped_to': 'MCI'})
    memoria: str = field(metadata={'mapped_to': 'memoria'})
    memoria_esordio: str = field(metadata={'mapped_to': 'memoria esordio'})
    fx_esecutive: str = field(metadata={'mapped_to': 'fx esecutive'})
    fx_esecutive_esordio: str = field(metadata={'mapped_to': 'fx esecutive esordio'})
    fx_visuo_spaziali: str = field(metadata={'mapped_to': 'fx visuo-spaziali'})
    fx_visuo_spaziali_esordio: str = field(metadata={'mapped_to': 'fx visuo-spaziali esordio'})
    linguaggio: str = field(metadata={'mapped_to': 'linguaggio'})
    linguaggio_esordio: str = field(metadata={'mapped_to': 'linguaggio esordio'})
    fx_pratto_gnosiche: str = field(metadata={'mapped_to': 'fx pratto-gnosiche'})
    fx_pratto_gnosiche_esordio: str = field(metadata={'mapped_to': 'fx pratto-gnosiche esordio'})
    social_cognition: str = field(metadata={'mapped_to': 'social cognition'})
    social_cognition_esordio: str = field(metadata={'mapped_to': 'social cognition esordio'})
    comportamento: str = field(metadata={'mapped_to': 'Comportamento'})
    comportamento_esordio: str = field(metadata={'mapped_to': 'Comportamento esordio'})
    extrapiramidale: str = field(metadata={'mapped_to': 'Extrapiramidale'})
    adl: str = field(metadata={'mapped_to': 'ADL'})
    iadl: str = field(metadata={'mapped_to': 'IADL'})
    cdr: str = field(metadata={'mapped_to': 'CDR'})
    cdr_sob: str = field(metadata={'mapped_to': 'CDR-SOB'})
    abeta42_liquor: str = field(metadata={'mapped_to': 'Aβ42 Liquor'})
    abeta40_liquor: str = field(metadata={'mapped_to': 'Aβ40 Liquor'})
    tau_totale_liquor: str = field(metadata={'mapped_to': 'Tau Totale Liquor'})
    ptau_181_liquor: str = field(metadata={'mapped_to': 'pTAU-181 Liquor'})
    nfl_liquor: str = field(metadata={'mapped_to': 'NfL Liquor'})
    nfl_siero: str = field(metadata={'mapped_to': 'NfL Siero'})
    abeta42_abeta40: str = field(metadata={'mapped_to': 'Aβ42/Aβ40'})
    abeta42_ptau: str = field(metadata={'mapped_to': 'Aβ42/pTAU'})
    abeta42_ttau: str = field(metadata={'mapped_to': 'Aβ42/tTAU'})
    ttau_ptau: str = field(metadata={'mapped_to': 'tTAU/pTAU'})
    data_mri: str = field(metadata={'mapped_to': 'Data MRI'})
    mta: str = field(metadata={'mapped_to': 'MTA'})
    fazekas: str = field(metadata={'mapped_to': 'FAZEKAS'})
    koedam: str = field(metadata={'mapped_to': 'KOEDAM'})
    gca: str = field(metadata={'mapped_to': 'GCA'})
    vascular: str = field(metadata={'mapped_to': 'VASCULAR'})
    data_pet: str = field(metadata={'mapped_to': 'Data PET'})
    pet_fdg: str = field(metadata={'mapped_to': 'PET-FDG'})
    data_spect: str = field(metadata={'mapped_to': 'Data SPECT'})
    spect: str = field(metadata={'mapped_to': 'SPECT'})
    data_pet_amiloide: str = field(metadata={'mapped_to': 'Data PET-Amiloide'})
    pet_abeta: str = field(metadata={'mapped_to': 'PET-Aβ'})
    data_dat_scan: str = field(metadata={'mapped_to': 'Data DAT-Scan'})
    dat_scan: str = field(metadata={'mapped_to': 'DAT-Scan'})
    data_nps: str = field(metadata={'mapped_to': 'Data NPS'})
    mmse_raw: float = field(metadata={'mapped_to': 'MMSE [raw]'})
    mmse_corr: float = field(metadata={'mapped_to': 'MMSE [corr]'})
    fab_raw: float = field(metadata={'mapped_to': 'FAB [raw]'})
    fab_corr: float = field(metadata={'mapped_to': 'FAB [corr]'})
    memoria_di_prosa_immediata_raw: float = field(metadata={'mapped_to': 'memoria di prosa - immediata [raw]'})
    memoria_di_prosa_immediata_corr: float = field(metadata={'mapped_to': 'memoria di prosa - immediata [corr]'})
    memoria_di_prosa_differita_raw: float = field(metadata={'mapped_to': 'memoria di prosa - differita  [raw]'})
    memoria_di_prosa_differita_corr: float = field(metadata={'mapped_to': 'memoria di prosa - differita  [corr]'})
    fcsrt_immediate_free_recall_raw: float = field(metadata={'mapped_to': 'FCSRT - Immediate free recall [raw]'})
    fcsrt_immediate_free_recall_corr: float = field(metadata={'mapped_to': 'FCSRT - Immediate free recall [corr]'})
    fcsrt_delayed_free_recall_raw: float = field(metadata={'mapped_to': 'FCSRT - Delayed free recall [raw]'})
    fcsrt_delayed_free_recall_corr: float = field(metadata={'mapped_to': 'FCSRT - Delayed free recall [corr]'})
    fcsrt_isc: float = field(metadata={'mapped_to': 'FCSRT - ISC '})
    fcsrt_itr: float = field(metadata={'mapped_to': 'FCSRT - ITR '})
    fcsrt_dtr: float = field(metadata={'mapped_to': 'FCSRT - DTR '})
    ravlt_immediato_raw: float = field(metadata={'mapped_to': 'RAVLT - Immediato [raw]'})
    ravlt_immediato_corr: float = field(metadata={'mapped_to': 'RAVLT - Immediato [corr]'})
    ravlt_differito_raw: float = field(metadata={'mapped_to': ' RAVLT - Differito [raw]'})
    ravlt_differito_corr: float = field(metadata={'mapped_to': ' RAVLT - Differito [corr]'})
    ravlt_recognition: float = field(metadata={'mapped_to': 'RAVLT - Recognition'})
    digit_span_diretto_raw: float = field(metadata={'mapped_to': 'Digit Span - diretto [raw]'})
    digit_span_diretto_corr: float = field(metadata={'mapped_to': 'Digit Span - diretto [corr]'})
    digit_span_inverso_raw: float = field(metadata={'mapped_to': 'Digit Span - Inverso [raw]'})
    digit_span_inverso_corr: float = field(metadata={'mapped_to': 'Digit Span - Inverso [corr]'})
    corsi_block_tapping_test_raw: float = field(metadata={'mapped_to': 'Corsi Block-tapping Test [raw]'})
    corsi_block_tapping_test_corr: float = field(metadata={'mapped_to': 'Corsi Block-tapping Test [corr]'})
    figura_di_rey_differita: float = field(metadata={'mapped_to': 'Figura di Rey - Differita'})
    figura_di_rey_differita_corr: float = field(metadata={'mapped_to': 'figura di Rey - Differita [corr]'})
    matrici_attentive_raw: float = field(metadata={'mapped_to': 'Matrici Attentive [raw]'})
    matrici_attentive_corr: float = field(metadata={'mapped_to': 'Matrici Attentive [corr]'})
    tmt_a_raw: float = field(metadata={'mapped_to': 'TMT - A [raw]'})
    tmt_a_corr: float = field(metadata={'mapped_to': 'TMT - A [corr]'})
    tmt_b_raw: float = field(metadata={'mapped_to': 'TMT - B [raw]'})
    tmt_b_corr: float = field(metadata={'mapped_to': 'TMT - B [corr]'})
    stroop_test_tempo_raw: float = field(metadata={'mapped_to': 'Stroop Test - tempo [raw]'})
    stroop_test_tempo_corr: float = field(metadata={'mapped_to': 'Stroop Test - tempo [corr]'})
    stroop_test_errori_raw: float = field(metadata={'mapped_to': 'Stroop Test - errori  [raw]'})
    stroop_test_errori_corr: float = field(metadata={'mapped_to': 'Stroop Test - errori  [corr]'})
    fluenza_verbale_fonemica_raw: float = field(metadata={'mapped_to': 'Fluenza verbale fonemica [raw]'})
    fluenza_verbale_fonemica_corr: float = field(metadata={'mapped_to': 'Fluenza verbale fonemica [corr]'})
    fluenza_verbale_semantica_raw: float = field(metadata={'mapped_to': 'Fluenza verbale semantica [raw]'})
    fluenza_verbale_semantica_corr: float = field(metadata={'mapped_to': 'Fluenza verbale semantica [corr]'})
    clock_drawing_test_raw: float = field(metadata={'mapped_to': 'Clock drawing test [raw]'})
    figura_di_rey_copia: float = field(metadata={'mapped_to': 'Figura di Rey - Copia'})
    test_di_prassia_costruttiva_raw: float = field(metadata={'mapped_to': 'Test di prassia costruttiva  [raw]'})
    test_di_prassia_costruttiva_corr: float = field(metadata={'mapped_to': 'Test di prassia costruttiva  [corr]'})
    gds: float = field(metadata={'mapped_to': 'GDS'})
    bdi: float = field(metadata={'mapped_to': 'BDI '})
    stai_i: float = field(metadata={'mapped_to': 'STAI-I'})
    stai_ii: float = field(metadata={'mapped_to': 'STAI-II '})
    social_cognition_gs_raw: float = field(metadata={'mapped_to': 'Social Cognition - GS [raw]'})
    social_cognition_gs_corr: float = field(metadata={'mapped_to': 'Social Cognition - GS [corr]'})
    social_cognition_ia_raw: float = field(metadata={'mapped_to': 'Social Cognition - IA [raw]'})
    social_cognition_ia_corr: float = field(metadata={'mapped_to': 'Social Cognition - IA [corr]'})
    social_cognition_ea_raw: float = field(metadata={'mapped_to': 'Social Cognition - EA [raw]'})
    social_cognition_ea_corr: float = field(metadata={'mapped_to': 'Social Cognition - EA [corr]'})
    social_cognition_ci_raw: float = field(metadata={'mapped_to': 'Social Cognition - CI [raw]'})
    social_cognition_ci_corr: float = field(metadata={'mapped_to': 'Social Cognition - CI [corr]'})
    cri_totale_raw: float = field(metadata={'mapped_to': 'CRI - Totale [raw]'})
    cri_tempo_libero_raw: float = field(metadata={'mapped_to': 'CRI - Tempo libero [raw]'})
    cri_lavoro_raw: float = field(metadata={'mapped_to': 'CRI - Lavoro [raw]'})
    cri_scuola_raw: float = field(metadata={'mapped_to': 'CRI - Scuola [raw]'})
    test_linguistici_nndd: str = field(metadata={'mapped_to': 'TEST LINGUISTICI NNDD'})

    @classmethod
    def from_dict(cls: Self, dict_to_map: Dict) -> Self:
        result_dict = {}
        for pr_field in fields(cls):
            dict_key = pr_field.metadata['mapped_to']
            result_dict[pr_field.name] = dict_to_map[dict_key]

        return cls(**result_dict)